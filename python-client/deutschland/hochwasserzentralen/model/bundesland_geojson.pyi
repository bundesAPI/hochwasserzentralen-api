# coding: utf-8

"""
    hochwasserzentralen.de API

    Das Länderübergreifendes Hochwasserportal (LHP) bietet auf https://www.hochwasserzentralen.de über die hier dokumentierte API Informationen zur Hochwassersituation in Deutschland an. Betreiber des LHP sind das Bayerische Landesamt für Umwelt (LfU) und die Landesanstalt für Umwelt Baden-Württemberg (LUBW). Die Urheberrechte an den veröffentlichten Daten liegen nach [Auskunft der Betreiber](https://www.hochwasserzentralen.de/impressum) bei der für das jeweilige Bundesland zuständigen Hochwasserzentrale bzw. beim jeweiligen Pegelbetreiber.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: kontakt@bund.dev
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401
from hochwasserzentralen import schemas  # noqa: F401

class BundeslandGeojson(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        class properties:
            type = schemas.StrSchema
            name = schemas.StrSchema

            class fetures(schemas.ListSchema):
                class MetaOapg:
                    class items(schemas.DictSchema):
                        class MetaOapg:
                            class properties:
                                type = schemas.StrSchema

                                class properties(schemas.DictSchema):
                                    class MetaOapg:
                                        class properties:
                                            ID = schemas.StrSchema
                                            ID_LANDGRENZ = schemas.StrSchema
                                            NAME = schemas.StrSchema
                                            __annotations__ = {
                                                "ID": ID,
                                                "ID_LANDGRENZ": ID_LANDGRENZ,
                                                "NAME": NAME,
                                            }
                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["ID"]
                                    ) -> MetaOapg.properties.ID: ...
                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["ID_LANDGRENZ"],
                                    ) -> MetaOapg.properties.ID_LANDGRENZ: ...
                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["NAME"]
                                    ) -> MetaOapg.properties.NAME: ...
                                    @typing.overload
                                    def __getitem__(
                                        self, name: str
                                    ) -> schemas.UnsetAnyTypeSchema: ...
                                    def __getitem__(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "ID",
                                                "ID_LANDGRENZ",
                                                "NAME",
                                            ],
                                            str,
                                        ],
                                    ):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["ID"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.ID, schemas.Unset
                                    ]: ...
                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["ID_LANDGRENZ"],
                                    ) -> typing.Union[
                                        MetaOapg.properties.ID_LANDGRENZ, schemas.Unset
                                    ]: ...
                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["NAME"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.NAME, schemas.Unset
                                    ]: ...
                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: str
                                    ) -> typing.Union[
                                        schemas.UnsetAnyTypeSchema, schemas.Unset
                                    ]: ...
                                    def get_item_oapg(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "ID",
                                                "ID_LANDGRENZ",
                                                "NAME",
                                            ],
                                            str,
                                        ],
                                    ):
                                        return super().get_item_oapg(name)
                                    def __new__(
                                        cls,
                                        *args: typing.Union[
                                            dict,
                                            frozendict.frozendict,
                                        ],
                                        ID: typing.Union[
                                            MetaOapg.properties.ID, str, schemas.Unset
                                        ] = schemas.unset,
                                        ID_LANDGRENZ: typing.Union[
                                            MetaOapg.properties.ID_LANDGRENZ,
                                            str,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        NAME: typing.Union[
                                            MetaOapg.properties.NAME, str, schemas.Unset
                                        ] = schemas.unset,
                                        _configuration: typing.Optional[
                                            schemas.Configuration
                                        ] = None,
                                        **kwargs: typing.Union[
                                            schemas.AnyTypeSchema,
                                            dict,
                                            frozendict.frozendict,
                                            str,
                                            date,
                                            datetime,
                                            uuid.UUID,
                                            int,
                                            float,
                                            decimal.Decimal,
                                            None,
                                            list,
                                            tuple,
                                            bytes,
                                        ],
                                    ) -> "properties":
                                        return super().__new__(
                                            cls,
                                            *args,
                                            ID=ID,
                                            ID_LANDGRENZ=ID_LANDGRENZ,
                                            NAME=NAME,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )

                                class geometry(schemas.DictSchema):
                                    class MetaOapg:
                                        class properties:
                                            type = schemas.StrSchema

                                            class coordinates(schemas.ListSchema):
                                                class MetaOapg:
                                                    class items(schemas.ListSchema):
                                                        class MetaOapg:
                                                            class items(
                                                                schemas.ListSchema
                                                            ):
                                                                class MetaOapg:
                                                                    items = (
                                                                        schemas.NumberSchema
                                                                    )
                                                                def __new__(
                                                                    cls,
                                                                    arg: typing.Union[
                                                                        typing.Tuple[
                                                                            typing.Union[
                                                                                MetaOapg.items,
                                                                                decimal.Decimal,
                                                                                int,
                                                                                float,
                                                                            ]
                                                                        ],
                                                                        typing.List[
                                                                            typing.Union[
                                                                                MetaOapg.items,
                                                                                decimal.Decimal,
                                                                                int,
                                                                                float,
                                                                            ]
                                                                        ],
                                                                    ],
                                                                    _configuration: typing.Optional[
                                                                        schemas.Configuration
                                                                    ] = None,
                                                                ) -> "items":
                                                                    return super().__new__(
                                                                        cls,
                                                                        arg,
                                                                        _configuration=_configuration,
                                                                    )
                                                                def __getitem__(
                                                                    self, i: int
                                                                ) -> MetaOapg.items:
                                                                    return super().__getitem__(
                                                                        i
                                                                    )
                                                        def __new__(
                                                            cls,
                                                            arg: typing.Union[
                                                                typing.Tuple[
                                                                    typing.Union[
                                                                        MetaOapg.items,
                                                                        list,
                                                                        tuple,
                                                                    ]
                                                                ],
                                                                typing.List[
                                                                    typing.Union[
                                                                        MetaOapg.items,
                                                                        list,
                                                                        tuple,
                                                                    ]
                                                                ],
                                                            ],
                                                            _configuration: typing.Optional[
                                                                schemas.Configuration
                                                            ] = None,
                                                        ) -> "items":
                                                            return super().__new__(
                                                                cls,
                                                                arg,
                                                                _configuration=_configuration,
                                                            )
                                                        def __getitem__(
                                                            self, i: int
                                                        ) -> MetaOapg.items:
                                                            return super().__getitem__(
                                                                i
                                                            )
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[
                                                        typing.Tuple[
                                                            typing.Union[
                                                                MetaOapg.items,
                                                                list,
                                                                tuple,
                                                            ]
                                                        ],
                                                        typing.List[
                                                            typing.Union[
                                                                MetaOapg.items,
                                                                list,
                                                                tuple,
                                                            ]
                                                        ],
                                                    ],
                                                    _configuration: typing.Optional[
                                                        schemas.Configuration
                                                    ] = None,
                                                ) -> "coordinates":
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                                def __getitem__(
                                                    self, i: int
                                                ) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            __annotations__ = {
                                                "type": type,
                                                "coordinates": coordinates,
                                            }
                                    @typing.overload
                                    def __getitem__(
                                        self, name: typing_extensions.Literal["type"]
                                    ) -> MetaOapg.properties.type: ...
                                    @typing.overload
                                    def __getitem__(
                                        self,
                                        name: typing_extensions.Literal["coordinates"],
                                    ) -> MetaOapg.properties.coordinates: ...
                                    @typing.overload
                                    def __getitem__(
                                        self, name: str
                                    ) -> schemas.UnsetAnyTypeSchema: ...
                                    def __getitem__(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "type",
                                                "coordinates",
                                            ],
                                            str,
                                        ],
                                    ):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: typing_extensions.Literal["type"]
                                    ) -> typing.Union[
                                        MetaOapg.properties.type, schemas.Unset
                                    ]: ...
                                    @typing.overload
                                    def get_item_oapg(
                                        self,
                                        name: typing_extensions.Literal["coordinates"],
                                    ) -> typing.Union[
                                        MetaOapg.properties.coordinates, schemas.Unset
                                    ]: ...
                                    @typing.overload
                                    def get_item_oapg(
                                        self, name: str
                                    ) -> typing.Union[
                                        schemas.UnsetAnyTypeSchema, schemas.Unset
                                    ]: ...
                                    def get_item_oapg(
                                        self,
                                        name: typing.Union[
                                            typing_extensions.Literal[
                                                "type",
                                                "coordinates",
                                            ],
                                            str,
                                        ],
                                    ):
                                        return super().get_item_oapg(name)
                                    def __new__(
                                        cls,
                                        *args: typing.Union[
                                            dict,
                                            frozendict.frozendict,
                                        ],
                                        type: typing.Union[
                                            MetaOapg.properties.type, str, schemas.Unset
                                        ] = schemas.unset,
                                        coordinates: typing.Union[
                                            MetaOapg.properties.coordinates,
                                            list,
                                            tuple,
                                            schemas.Unset,
                                        ] = schemas.unset,
                                        _configuration: typing.Optional[
                                            schemas.Configuration
                                        ] = None,
                                        **kwargs: typing.Union[
                                            schemas.AnyTypeSchema,
                                            dict,
                                            frozendict.frozendict,
                                            str,
                                            date,
                                            datetime,
                                            uuid.UUID,
                                            int,
                                            float,
                                            decimal.Decimal,
                                            None,
                                            list,
                                            tuple,
                                            bytes,
                                        ],
                                    ) -> "geometry":
                                        return super().__new__(
                                            cls,
                                            *args,
                                            type=type,
                                            coordinates=coordinates,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                __annotations__ = {
                                    "type": type,
                                    "properties": properties,
                                    "geometry": geometry,
                                }
                        @typing.overload
                        def __getitem__(
                            self, name: typing_extensions.Literal["type"]
                        ) -> MetaOapg.properties.type: ...
                        @typing.overload
                        def __getitem__(
                            self, name: typing_extensions.Literal["properties"]
                        ) -> MetaOapg.properties.properties: ...
                        @typing.overload
                        def __getitem__(
                            self, name: typing_extensions.Literal["geometry"]
                        ) -> MetaOapg.properties.geometry: ...
                        @typing.overload
                        def __getitem__(
                            self, name: str
                        ) -> schemas.UnsetAnyTypeSchema: ...
                        def __getitem__(
                            self,
                            name: typing.Union[
                                typing_extensions.Literal[
                                    "type",
                                    "properties",
                                    "geometry",
                                ],
                                str,
                            ],
                        ):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        @typing.overload
                        def get_item_oapg(
                            self, name: typing_extensions.Literal["type"]
                        ) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                        @typing.overload
                        def get_item_oapg(
                            self, name: typing_extensions.Literal["properties"]
                        ) -> typing.Union[
                            MetaOapg.properties.properties, schemas.Unset
                        ]: ...
                        @typing.overload
                        def get_item_oapg(
                            self, name: typing_extensions.Literal["geometry"]
                        ) -> typing.Union[
                            MetaOapg.properties.geometry, schemas.Unset
                        ]: ...
                        @typing.overload
                        def get_item_oapg(
                            self, name: str
                        ) -> typing.Union[
                            schemas.UnsetAnyTypeSchema, schemas.Unset
                        ]: ...
                        def get_item_oapg(
                            self,
                            name: typing.Union[
                                typing_extensions.Literal[
                                    "type",
                                    "properties",
                                    "geometry",
                                ],
                                str,
                            ],
                        ):
                            return super().get_item_oapg(name)
                        def __new__(
                            cls,
                            *args: typing.Union[
                                dict,
                                frozendict.frozendict,
                            ],
                            type: typing.Union[
                                MetaOapg.properties.type, str, schemas.Unset
                            ] = schemas.unset,
                            properties: typing.Union[
                                MetaOapg.properties.properties,
                                dict,
                                frozendict.frozendict,
                                schemas.Unset,
                            ] = schemas.unset,
                            geometry: typing.Union[
                                MetaOapg.properties.geometry,
                                dict,
                                frozendict.frozendict,
                                schemas.Unset,
                            ] = schemas.unset,
                            _configuration: typing.Optional[
                                schemas.Configuration
                            ] = None,
                            **kwargs: typing.Union[
                                schemas.AnyTypeSchema,
                                dict,
                                frozendict.frozendict,
                                str,
                                date,
                                datetime,
                                uuid.UUID,
                                int,
                                float,
                                decimal.Decimal,
                                None,
                                list,
                                tuple,
                                bytes,
                            ],
                        ) -> "items":
                            return super().__new__(
                                cls,
                                *args,
                                type=type,
                                properties=properties,
                                geometry=geometry,
                                _configuration=_configuration,
                                **kwargs,
                            )
                def __new__(
                    cls,
                    arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                dict,
                                frozendict.frozendict,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                dict,
                                frozendict.frozendict,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "fetures":
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "type": type,
                "name": name,
                "fetures": fetures,
            }
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["type"]
    ) -> MetaOapg.properties.type: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["name"]
    ) -> MetaOapg.properties.name: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["fetures"]
    ) -> MetaOapg.properties.fetures: ...
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "type",
                "name",
                "fetures",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["type"]
    ) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["name"]
    ) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["fetures"]
    ) -> typing.Union[MetaOapg.properties.fetures, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "type",
                "name",
                "fetures",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)
    def __new__(
        cls,
        *args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        type: typing.Union[
            MetaOapg.properties.type, str, schemas.Unset
        ] = schemas.unset,
        name: typing.Union[
            MetaOapg.properties.name, str, schemas.Unset
        ] = schemas.unset,
        fetures: typing.Union[
            MetaOapg.properties.fetures, list, tuple, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "BundeslandGeojson":
        return super().__new__(
            cls,
            *args,
            type=type,
            name=name,
            fetures=fetures,
            _configuration=_configuration,
            **kwargs,
        )
