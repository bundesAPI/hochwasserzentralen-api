# coding: utf-8

"""
    hochwasserzentralen.de API

    Das Länderübergreifendes Hochwasserportal (LHP) bietet auf https://www.hochwasserzentralen.de über die hier dokumentierte API Informationen zur Hochwassersituation in Deutschland an. Betreiber des LHP sind das Bayerische Landesamt für Umwelt (LfU) und die Landesanstalt für Umwelt Baden-Württemberg (LUBW). Die Urheberrechte an den veröffentlichten Daten liegen nach [Auskunft der Betreiber](https://www.hochwasserzentralen.de/impressum) bei der für das jeweilige Bundesland zuständigen Hochwasserzentrale bzw. beim jeweiligen Pegelbetreiber.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: kontakt@bund.dev
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401
from deutschland.hochwasserzentralen import schemas  # noqa: F401


class InfosPegel(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        class properties:
            PN = schemas.StrSchema
            GW = schemas.StrSchema
            URL_PEGEL = schemas.StrSchema
            HW = schemas.StrSchema
            HW_TXT = schemas.StrSchema
            ZEIT = schemas.StrSchema
            W = schemas.StrSchema
            Q = schemas.StrSchema
            HINT = schemas.StrSchema
            URL_LAND = schemas.StrSchema
            ID_LAND = schemas.StrSchema
            __annotations__ = {
                "PN": PN,
                "GW": GW,
                "URL_PEGEL": URL_PEGEL,
                "HW": HW,
                "HW_TXT": HW_TXT,
                "ZEIT": ZEIT,
                "W": W,
                "Q": Q,
                "HINT": HINT,
                "URL_LAND": URL_LAND,
                "ID_LAND": ID_LAND,
            }

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["PN"]
    ) -> MetaOapg.properties.PN:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["GW"]
    ) -> MetaOapg.properties.GW:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["URL_PEGEL"]
    ) -> MetaOapg.properties.URL_PEGEL:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["HW"]
    ) -> MetaOapg.properties.HW:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["HW_TXT"]
    ) -> MetaOapg.properties.HW_TXT:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["ZEIT"]
    ) -> MetaOapg.properties.ZEIT:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["W"]
    ) -> MetaOapg.properties.W:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["Q"]
    ) -> MetaOapg.properties.Q:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["HINT"]
    ) -> MetaOapg.properties.HINT:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["URL_LAND"]
    ) -> MetaOapg.properties.URL_LAND:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["ID_LAND"]
    ) -> MetaOapg.properties.ID_LAND:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "PN",
                "GW",
                "URL_PEGEL",
                "HW",
                "HW_TXT",
                "ZEIT",
                "W",
                "Q",
                "HINT",
                "URL_LAND",
                "ID_LAND",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["PN"]
    ) -> typing.Union[MetaOapg.properties.PN, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["GW"]
    ) -> typing.Union[MetaOapg.properties.GW, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["URL_PEGEL"]
    ) -> typing.Union[MetaOapg.properties.URL_PEGEL, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["HW"]
    ) -> typing.Union[MetaOapg.properties.HW, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["HW_TXT"]
    ) -> typing.Union[MetaOapg.properties.HW_TXT, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["ZEIT"]
    ) -> typing.Union[MetaOapg.properties.ZEIT, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["W"]
    ) -> typing.Union[MetaOapg.properties.W, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["Q"]
    ) -> typing.Union[MetaOapg.properties.Q, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["HINT"]
    ) -> typing.Union[MetaOapg.properties.HINT, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["URL_LAND"]
    ) -> typing.Union[MetaOapg.properties.URL_LAND, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["ID_LAND"]
    ) -> typing.Union[MetaOapg.properties.ID_LAND, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "PN",
                "GW",
                "URL_PEGEL",
                "HW",
                "HW_TXT",
                "ZEIT",
                "W",
                "Q",
                "HINT",
                "URL_LAND",
                "ID_LAND",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        PN: typing.Union[MetaOapg.properties.PN, str, schemas.Unset] = schemas.unset,
        GW: typing.Union[MetaOapg.properties.GW, str, schemas.Unset] = schemas.unset,
        URL_PEGEL: typing.Union[
            MetaOapg.properties.URL_PEGEL, str, schemas.Unset
        ] = schemas.unset,
        HW: typing.Union[MetaOapg.properties.HW, str, schemas.Unset] = schemas.unset,
        HW_TXT: typing.Union[
            MetaOapg.properties.HW_TXT, str, schemas.Unset
        ] = schemas.unset,
        ZEIT: typing.Union[
            MetaOapg.properties.ZEIT, str, schemas.Unset
        ] = schemas.unset,
        W: typing.Union[MetaOapg.properties.W, str, schemas.Unset] = schemas.unset,
        Q: typing.Union[MetaOapg.properties.Q, str, schemas.Unset] = schemas.unset,
        HINT: typing.Union[
            MetaOapg.properties.HINT, str, schemas.Unset
        ] = schemas.unset,
        URL_LAND: typing.Union[
            MetaOapg.properties.URL_LAND, str, schemas.Unset
        ] = schemas.unset,
        ID_LAND: typing.Union[
            MetaOapg.properties.ID_LAND, str, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "InfosPegel":
        return super().__new__(
            cls,
            *args,
            PN=PN,
            GW=GW,
            URL_PEGEL=URL_PEGEL,
            HW=HW,
            HW_TXT=HW_TXT,
            ZEIT=ZEIT,
            W=W,
            Q=Q,
            HINT=HINT,
            URL_LAND=URL_LAND,
            ID_LAND=ID_LAND,
            _configuration=_configuration,
            **kwargs,
        )
