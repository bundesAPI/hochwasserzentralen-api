# coding: utf-8

"""
    hochwasserzentralen.de API

    Das Länderübergreifendes Hochwasserportal (LHP) bietet auf https://www.hochwasserzentralen.de über die hier dokumentierte API Informationen zur Hochwassersituation in Deutschland an. Betreiber des LHP sind das Bayerische Landesamt für Umwelt (LfU) und die Landesanstalt für Umwelt Baden-Württemberg (LUBW). Die Urheberrechte an den veröffentlichten Daten liegen nach [Auskunft der Betreiber](https://www.hochwasserzentralen.de/impressum) bei der für das jeweilige Bundesland zuständigen Hochwasserzentrale bzw. beim jeweiligen Pegelbetreiber.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: kontakt@bund.dev
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401
from deutschland.hochwasserzentralen import schemas  # noqa: F401


class InfosBundesland(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        class properties:
            class ID(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "ID":
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            class NAME(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "NAME":
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            class AKTIV(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "AKTIV":
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            class URL(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "URL":
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            class KINFO(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "KINFO":
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            class WARN(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "WARN":
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            class BERICHT(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "BERICHT":
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            class ANZP(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "ANZP":
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            class ALLHW(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.IntSchema

                def __new__(
                    cls,
                    arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                decimal.Decimal,
                                int,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                decimal.Decimal,
                                int,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "ALLHW":
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            class ANZK1(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "ANZK1":
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            class ANZK2(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "ANZK2":
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            class ANZK3(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "ANZK3":
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            class ANZK4(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "ANZK4":
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            class ZPD(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "ZPD":
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            class BA(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "BA":
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            class LANDTYP(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "LANDTYP":
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            __annotations__ = {
                "ID": ID,
                "NAME": NAME,
                "AKTIV": AKTIV,
                "URL": URL,
                "KINFO": KINFO,
                "WARN": WARN,
                "BERICHT": BERICHT,
                "ANZP": ANZP,
                "ALLHW": ALLHW,
                "ANZK1": ANZK1,
                "ANZK2": ANZK2,
                "ANZK3": ANZK3,
                "ANZK4": ANZK4,
                "ZPD": ZPD,
                "BA": BA,
                "LANDTYP": LANDTYP,
            }

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["ID"]
    ) -> MetaOapg.properties.ID:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["NAME"]
    ) -> MetaOapg.properties.NAME:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["AKTIV"]
    ) -> MetaOapg.properties.AKTIV:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["URL"]
    ) -> MetaOapg.properties.URL:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["KINFO"]
    ) -> MetaOapg.properties.KINFO:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["WARN"]
    ) -> MetaOapg.properties.WARN:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["BERICHT"]
    ) -> MetaOapg.properties.BERICHT:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["ANZP"]
    ) -> MetaOapg.properties.ANZP:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["ALLHW"]
    ) -> MetaOapg.properties.ALLHW:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["ANZK1"]
    ) -> MetaOapg.properties.ANZK1:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["ANZK2"]
    ) -> MetaOapg.properties.ANZK2:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["ANZK3"]
    ) -> MetaOapg.properties.ANZK3:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["ANZK4"]
    ) -> MetaOapg.properties.ANZK4:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["ZPD"]
    ) -> MetaOapg.properties.ZPD:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["BA"]
    ) -> MetaOapg.properties.BA:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["LANDTYP"]
    ) -> MetaOapg.properties.LANDTYP:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "ID",
                "NAME",
                "AKTIV",
                "URL",
                "KINFO",
                "WARN",
                "BERICHT",
                "ANZP",
                "ALLHW",
                "ANZK1",
                "ANZK2",
                "ANZK3",
                "ANZK4",
                "ZPD",
                "BA",
                "LANDTYP",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["ID"]
    ) -> typing.Union[MetaOapg.properties.ID, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["NAME"]
    ) -> typing.Union[MetaOapg.properties.NAME, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["AKTIV"]
    ) -> typing.Union[MetaOapg.properties.AKTIV, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["URL"]
    ) -> typing.Union[MetaOapg.properties.URL, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["KINFO"]
    ) -> typing.Union[MetaOapg.properties.KINFO, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["WARN"]
    ) -> typing.Union[MetaOapg.properties.WARN, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["BERICHT"]
    ) -> typing.Union[MetaOapg.properties.BERICHT, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["ANZP"]
    ) -> typing.Union[MetaOapg.properties.ANZP, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["ALLHW"]
    ) -> typing.Union[MetaOapg.properties.ALLHW, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["ANZK1"]
    ) -> typing.Union[MetaOapg.properties.ANZK1, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["ANZK2"]
    ) -> typing.Union[MetaOapg.properties.ANZK2, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["ANZK3"]
    ) -> typing.Union[MetaOapg.properties.ANZK3, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["ANZK4"]
    ) -> typing.Union[MetaOapg.properties.ANZK4, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["ZPD"]
    ) -> typing.Union[MetaOapg.properties.ZPD, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["BA"]
    ) -> typing.Union[MetaOapg.properties.BA, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["LANDTYP"]
    ) -> typing.Union[MetaOapg.properties.LANDTYP, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "ID",
                "NAME",
                "AKTIV",
                "URL",
                "KINFO",
                "WARN",
                "BERICHT",
                "ANZP",
                "ALLHW",
                "ANZK1",
                "ANZK2",
                "ANZK3",
                "ANZK4",
                "ZPD",
                "BA",
                "LANDTYP",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        ID: typing.Union[
            MetaOapg.properties.ID, list, tuple, schemas.Unset
        ] = schemas.unset,
        NAME: typing.Union[
            MetaOapg.properties.NAME, list, tuple, schemas.Unset
        ] = schemas.unset,
        AKTIV: typing.Union[
            MetaOapg.properties.AKTIV, list, tuple, schemas.Unset
        ] = schemas.unset,
        URL: typing.Union[
            MetaOapg.properties.URL, list, tuple, schemas.Unset
        ] = schemas.unset,
        KINFO: typing.Union[
            MetaOapg.properties.KINFO, list, tuple, schemas.Unset
        ] = schemas.unset,
        WARN: typing.Union[
            MetaOapg.properties.WARN, list, tuple, schemas.Unset
        ] = schemas.unset,
        BERICHT: typing.Union[
            MetaOapg.properties.BERICHT, list, tuple, schemas.Unset
        ] = schemas.unset,
        ANZP: typing.Union[
            MetaOapg.properties.ANZP, list, tuple, schemas.Unset
        ] = schemas.unset,
        ALLHW: typing.Union[
            MetaOapg.properties.ALLHW, list, tuple, schemas.Unset
        ] = schemas.unset,
        ANZK1: typing.Union[
            MetaOapg.properties.ANZK1, list, tuple, schemas.Unset
        ] = schemas.unset,
        ANZK2: typing.Union[
            MetaOapg.properties.ANZK2, list, tuple, schemas.Unset
        ] = schemas.unset,
        ANZK3: typing.Union[
            MetaOapg.properties.ANZK3, list, tuple, schemas.Unset
        ] = schemas.unset,
        ANZK4: typing.Union[
            MetaOapg.properties.ANZK4, list, tuple, schemas.Unset
        ] = schemas.unset,
        ZPD: typing.Union[
            MetaOapg.properties.ZPD, list, tuple, schemas.Unset
        ] = schemas.unset,
        BA: typing.Union[
            MetaOapg.properties.BA, list, tuple, schemas.Unset
        ] = schemas.unset,
        LANDTYP: typing.Union[
            MetaOapg.properties.LANDTYP, list, tuple, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "InfosBundesland":
        return super().__new__(
            cls,
            *args,
            ID=ID,
            NAME=NAME,
            AKTIV=AKTIV,
            URL=URL,
            KINFO=KINFO,
            WARN=WARN,
            BERICHT=BERICHT,
            ANZP=ANZP,
            ALLHW=ALLHW,
            ANZK1=ANZK1,
            ANZK2=ANZK2,
            ANZK3=ANZK3,
            ANZK4=ANZK4,
            ZPD=ZPD,
            BA=BA,
            LANDTYP=LANDTYP,
            _configuration=_configuration,
            **kwargs,
        )
